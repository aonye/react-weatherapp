{"ast":null,"code":"function processWeather(info) {\n  const {\n    name: cityName,\n    main: {\n      temp: temperature,\n      temp_max: maxTemp,\n      temp_min: minTemp,\n      feels_like: feelsLike,\n      humidity,\n      pressure\n    },\n    wind: {\n      speed: windSpeed\n    },\n    weather: [{\n      main: conditions,\n      description: descript\n    }],\n    clouds: {\n      all: cloudiness\n    }\n  } = info;\n  return {\n    cityName,\n    temperature,\n    maxTemp,\n    minTemp,\n    feelsLike,\n    humidity,\n    pressure,\n    windSpeed,\n    conditions,\n    descript,\n    cloudiness\n  };\n}\n\nasync function getWeather(location) {\n  let url = 'https://api.openweathermap.org/data/2.5/weather?q=' + location + '&appid=aabf6a78df5059eed68efb2611dc411a';\n\n  try {\n    const response = await fetch(url, {\n      mode: 'cors'\n    });\n\n    if (!response.ok) {\n      throw new Error(`City ${location} not found`);\n    }\n\n    const weatherData = await response.json();\n    const weatherObj = processWeather(weatherData);\n    return weatherObj;\n  } catch (error) {\n    alert(error);\n  }\n}\n\nexport { getWeather, processWeather };","map":{"version":3,"sources":["/home/yeandyy/Documents/the_odin_project/react-weatherapp/src/components/weather.js"],"names":["processWeather","info","name","cityName","main","temp","temperature","temp_max","maxTemp","temp_min","minTemp","feels_like","feelsLike","humidity","pressure","wind","speed","windSpeed","weather","conditions","description","descript","clouds","all","cloudiness","getWeather","location","url","response","fetch","mode","ok","Error","weatherData","json","weatherObj","error","alert"],"mappings":"AAAA,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,QAAM;AACFC,IAAAA,IAAI,EAAEC,QADJ;AAEFC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,IAAI,EAAEC,WAAR;AAAqBC,MAAAA,QAAQ,EAAEC,OAA/B;AAAwCC,MAAAA,QAAQ,EAAEC,OAAlD;AAA2DC,MAAAA,UAAU,EAAEC,SAAvE;AAAkFC,MAAAA,QAAlF;AAA4FC,MAAAA;AAA5F,KAFJ;AAGFC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAEC;AAAT,KAHJ;AAIFC,IAAAA,OAAO,EAAE,CAAC;AAAEd,MAAAA,IAAI,EAAEe,UAAR;AAAoBC,MAAAA,WAAW,EAAEC;AAAjC,KAAD,CAJP;AAKFC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAEC;AAAP;AALN,MAMFvB,IANJ;AAOA,SAAO;AAAEE,IAAAA,QAAF;AAAYG,IAAAA,WAAZ;AAAyBE,IAAAA,OAAzB;AAAkCE,IAAAA,OAAlC;AAA2CE,IAAAA,SAA3C;AAAsDC,IAAAA,QAAtD;AAAgEC,IAAAA,QAAhE;AAA0EG,IAAAA,SAA1E;AAAqFE,IAAAA,UAArF;AAAiGE,IAAAA,QAAjG;AAA2GG,IAAAA;AAA3G,GAAP;AACH;;AAED,eAAeC,UAAf,CAA0BC,QAA1B,EAAoC;AAChC,MAAIC,GAAG,GAAG,uDAAuDD,QAAvD,GAAkE,yCAA5E;;AACA,MAAI;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAN,CAA5B;;AACA,QAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AACd,YAAM,IAAIC,KAAJ,CAAW,QAAON,QAAS,YAA3B,CAAN;AACH;;AACD,UAAMO,WAAW,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA1B;AACA,UAAMC,UAAU,GAAGnC,cAAc,CAACiC,WAAD,CAAjC;AACA,WAAOE,UAAP;AACH,GARD,CAQE,OAAOC,KAAP,EAAc;AACZC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACH;AACJ;;AAED,SAASX,UAAT,EAAqBzB,cAArB","sourcesContent":["function processWeather(info) {\n    const {\n        name: cityName,\n        main: { temp: temperature, temp_max: maxTemp, temp_min: minTemp, feels_like: feelsLike, humidity, pressure },\n        wind: { speed: windSpeed },\n        weather: [{ main: conditions, description: descript }],\n        clouds: { all: cloudiness }\n    } = info;\n    return { cityName, temperature, maxTemp, minTemp, feelsLike, humidity, pressure, windSpeed, conditions, descript, cloudiness };\n}\n\nasync function getWeather(location) {\n    let url = 'https://api.openweathermap.org/data/2.5/weather?q=' + location + '&appid=aabf6a78df5059eed68efb2611dc411a';\n    try {\n        const response = await fetch(url, { mode: 'cors' });\n        if (!response.ok) {\n            throw new Error(`City ${location} not found`);\n        }\n        const weatherData = await response.json();\n        const weatherObj = processWeather(weatherData);\n        return weatherObj;\n    } catch (error) {\n        alert(error);\n    }\n}\n\nexport { getWeather, processWeather };"]},"metadata":{},"sourceType":"module"}