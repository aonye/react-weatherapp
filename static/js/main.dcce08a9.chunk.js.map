{"version":3,"sources":["components/weather.js","assets/sunny_weather_icon_150663.png","components/mainview.js","components/model.js","App.js","index.js"],"names":["processWeather","info","cityName","name","main","temperature","temp","maxTemp","temp_max","minTemp","temp_min","feelsLike","feels_like","humidity","pressure","windSpeed","wind","speed","weather","conditions","descript","description","cloudiness","clouds","all","location","a","url","fetch","mode","response","ok","Error","json","weatherData","weatherObj","alert","Main","citySearchRef","useRef","widgetRef","useState","setWeather","callAPI","e","preventDefault","promise","getWeather","current","value","then","result","error","widget","weatherInfo","ref","className","obj","nodeArr","key","push","map","item","index","makeNodes","makeWidget","src","sunshineImg","alt","onSubmit","for","type","id","placeholder","onChange","childNodes","target","forEach","node","style","display","re","RegExp","classList","toLowerCase","search","filterElem","input","firstChild","output","lastChild","textContent","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","getElementById","setAttribute","click","printElement","href","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dcce08a9.chunk.js","sourcesContent":["function processWeather(info) {\n    const {\n        name: cityName,\n        main: { temp: temperature, temp_max: maxTemp, temp_min: minTemp, feels_like: feelsLike, humidity, pressure },\n        wind: { speed: windSpeed },\n        weather: [{ main: conditions, description: descript }],\n        clouds: { all: cloudiness }\n    } = info;\n    return { cityName, temperature, maxTemp, minTemp, feelsLike, humidity, pressure, windSpeed, conditions, descript, cloudiness };\n}\n\nasync function getWeather(location) {\n    let url = 'https://api.openweathermap.org/data/2.5/weather?q=' + location + '&appid=aabf6a78df5059eed68efb2611dc411a';\n    try {\n        const response = await fetch(url, { mode: 'cors' });\n        if (!response.ok) {\n            throw new Error(`City ${location} not found`);\n        }\n        const weatherData = await response.json();\n        const weatherObj = processWeather(weatherData);\n        return weatherObj;\n    } catch (error) {\n        alert(error);\n    }\n}\n\nexport { getWeather, processWeather };","export default __webpack_public_path__ + \"static/media/sunny_weather_icon_150663.b6bc684b.png\";","import { useRef, useState } from 'react'\nimport { getWeather } from './weather';\nimport { makeWidget } from './model';\nimport sunshineImg from '../assets/sunny_weather_icon_150663.png'\nimport '../styles/styles.css';\n\nconst Main = () => {\n    const citySearchRef = useRef();\n    const widgetRef = useRef();\n    const [weather, setWeather] = useState('');\n\n    function printElement(e) {\n        e.preventDefault();\n        const input = e.target.firstChild.value;\n        const childNodes = widgetRef.current.childNodes;\n        let output = {};\n        const re = new RegExp(`${input}`, 'g');\n        childNodes.forEach((node) => {\n            if (node.classList.value.search(re) !== -1) {\n                output = { ...output, [node.classList.value]: node.lastChild.textContent };\n            }\n        });\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(output));\n        const dlAnchorElem = document.getElementById('downloadAnchorElem');\n        dlAnchorElem.setAttribute(\"href\", dataStr);\n        dlAnchorElem.setAttribute(\"download\", \"data.json\");\n        dlAnchorElem.click();\n    }\n\n    function filterElem(e) {\n        if (!widgetRef.current) {\n            return;\n        }\n        const childNodes = widgetRef.current.childNodes;\n        if (e.target.value === '') { //no search query\n            childNodes.forEach((node) => {\n                node.style.display = 'block';\n            });\n        } else {\n            const re = new RegExp(`${e.target.value}`, 'g');\n            childNodes.forEach((node) => {\n                const nodeClass = node.classList.value.toLowerCase();\n                if (nodeClass.search(re) !== -1) {\n                    node.style.display = 'block';\n                } else {\n                    node.style.display = 'none';\n                }\n            })\n        }\n    }\n\n\n    function callAPI(e) {\n        e.preventDefault();\n        const city = citySearchRef.current.value;\n        let promise = getWeather(city);\n        promise.then((result, error) => {\n            if (error) {\n                throw new Error();\n            }\n            const widget = makeWidget(result, widgetRef);\n            setWeather(widget);\n        });\n    }\n\n    return (\n        <section>\n            <nav>\n                <header>\n                    <img src={sunshineImg} alt='sunclipart' />\n                    <div>Aonye's Weather App</div>\n                    <img src={sunshineImg} alt='sunclipart' />\n                </header>\n            </nav>\n            <form onSubmit={(e) => callAPI(e)}>\n                <label for='citysearch'></label>\n                <input ref={citySearchRef} type='text' id='citysearch' name='citysearch' placeholder=\"Enter a City to Search\" />\n                <button>Submit</button>\n            </form>\n            {weather}\n            <form onChange={(e) => filterElem(e)} onSubmit={(e) => printElement(e)}>\n                <input type='text' placeholder={`Filter by title, submit to save`} />\n                <button>Submit</button>\n                <a href='/' id=\"downloadAnchorElem\" style={{ 'display': 'none' }}>{''}</a>\n            </form>\n        </section>\n    )\n}\n\nexport default Main;","const makeWidget = (weatherInfo, widgetRef) => {\n\n    function makeNodes(obj) {\n        const nodeArr = [];\n        for (let key in weatherInfo) {\n            nodeArr.push({ 'key': key, info: weatherInfo[key] });\n        }\n        return nodeArr.map((item, index) => {\n            return (\n                <div key={index} className={item.key}>\n                    <span>{item.key}</span>\n                    <div className='info'>\n                        {item.info}\n                    </div>\n                </div>\n            );\n        })\n    }\n\n    return (\n        <div ref={widgetRef} className='widget'>\n            {makeNodes(weatherInfo)}\n        </div>\n    )\n};\n\nexport { makeWidget };","import Main from './components/mainview';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}